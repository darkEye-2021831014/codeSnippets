const int N = 1e6 + 10;
int nodeValue[5 * N]; // 4*N Is Also Valid
void build(int node, int begin, int end, vi &array)
{
    if (begin == end)
    {
        nodeValue[node] = array[begin];
        return;
    }
    int mid = (begin + end) / 2;
    int leftNode = node * 2, rightNode = node * 2 + 1;
    build(leftNode, begin, mid, array);
    build(rightNode, mid + 1, end, array);
    // Do the operation for which You Need precomputaion
    // The following example is for summation operation
    nodeValue[node] = nodeValue[leftNode] + nodeValue[rightNode];
}

int query(int node, int begin, int end, int leftIndex, int rightIndex)
{
    if (end < leftIndex || begin > rightIndex)
        return 0; //node is outside of the seach range so return the appropriate value like for summation return 0 but for multiplication return 1(the identity)
    if (begin >= leftIndex && end <= rightIndex)
        return nodeValue[node]; // node is inside the search range
    // now a part of the node is inside the seach range
    int mid = (begin + end) / 2;
    int leftNode = node * 2, rightNode = node * 2 + 1;
    // Do the operation for which you need precomputation here
    // The Following Example Is For Summation Operation
    return query(leftNode, begin, mid, leftIndex, rightIndex) +
           query(rightNode, mid + 1, end, leftIndex, rightIndex);
}

void update(int node, int begin, int end, int updateIndex, int newValue)
{
    if (end < updateIndex || begin > updateIndex)
        return; // node is outside of the seach range
    if (begin == updateIndex && end == updateIndex)
    {
        nodeValue[node] = newValue; // node is inside the search range
        return;
    }
    // now a part of the node is inside the seach range
    int mid = (begin + end) / 2;
    int leftNode = node * 2, rightNode = node * 2 + 1;
    update(leftNode, begin, mid, updateIndex, newValue);
    update(rightNode, mid + 1, end, updateIndex, newValue);
    // do the operation for which you need precomputation
    // the example below is for summation operation
    nodeValue[node] = nodeValue[leftNode] + nodeValue[rightNode];
}
