const int N = 1e5 + 10;
#define lc (n << 1)
#define rc ((n << 1) | 1)
int t[4 * N], lazy[4 * N];
inline void push(int n, int b, int e)
{
    if (lazy[n] == 0)
        return;
    t[n] = t[n] + lazy[n] * (e - b + 1);
    if (b != e)
    {
        lazy[lc] = lazy[lc] + lazy[n];
        lazy[rc] = lazy[rc] + lazy[n];
    }
    lazy[n] = 0;
}
inline int combine(int a, int b)
{
    return a + b;
}
inline void pull(int n)
{
    t[n] = t[lc] + t[rc];
}
void build(int n, int b, int e, vi &a)
{
    lazy[n] = 0;
    if (b == e)
    {
        t[n] = a[b];
        return;
    }
    int mid = (b + e) >> 1;
    build(lc, b, mid, a);
    build(rc, mid + 1, e, a);
    pull(n);
}
void update(int n, int b, int e, int leftIndex, int rightIndex, int newValue)
{
    push(n, b, e);
    if (rightIndex < b || e < leftIndex)
        return;
    if (leftIndex <= b && e <= rightIndex)
    {
        lazy[n] = newValue; // set lazy
        push(n, b, e);
        return;
    }
    int mid = (b + e) >> 1;
    update(lc, b, mid, leftIndex, rightIndex, newValue);
    update(rc, mid + 1, e, leftIndex, rightIndex, newValue);
    pull(n);
}
int query(int n, int b, int e, int leftIndex, int rightIndex)
{
    push(n, b, e);
    if (leftIndex > e || b > rightIndex)
        return 0; // return null
    if (leftIndex <= b && e <= rightIndex)
        return t[n];
    int mid = (b + e) >> 1;
    return combine(query(lc, b, mid, leftIndex, rightIndex), query(rc, mid + 1, e, leftIndex, rightIndex));
}
