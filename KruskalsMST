const int N = 1 * 1e5 + 10;
int Size[N];
int parent[N];
void makeNode(int v)
{
    parent[v] = v;
    Size[v] = 1;
}

int findRoot(int v)
{
    if (parent[v] == v)
        return v;
    return parent[v] = findRoot(parent[v]);
}

void Union(int a, int b)
{
    a = findRoot(a);
    b = findRoot(b);
    if (a != b)
    {
        if (Size[a] < Size[b])
            swap(a, b);
        parent[b] = a;
        Size[a] += Size[b];
    }
}

int kruskalsMST(vector<vi> &edges, int n)
{
    sort(all(edges));
    int cost = 0;
    for (auto &edge : edges)
    {
        int w = edge[0];
        int u = edge[1];
        int v = edge[2];
        if (findRoot(u) == findRoot(v))
            continue;
        else
        {
            cost += w;
            Union(u, v);
        }
    }

    int root = findRoot(1);
    for (int i = 2; i <= n; i++)
    {
        if (findRoot(i) != root)
            return INF; // Multiple MST
    }

    return cost;
}

// inside code
for (int i = 1; i <= n; i++)
{
    makeNode(i);
}
